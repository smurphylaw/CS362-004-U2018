        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://gcc -o randomtestcard1 -g  randomtestcard1.c dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
        -:    2:
        -:    3:// Random Generator for Smithy Card
        -:    4:
        -:    5:#include <stdio.h>
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <string.h>
        -:   10:#include <assert.h>
        -:   11:#include <math.h>
        -:   12:
        -:   13:int failCount = 0;
        -:   14:int discardFailed = 0;
        -:   15:int drawCardFailed = 0;
        -:   16:int deckCountFailed = 0;
        -:   17:int handCountFailed = 0;
        -:   18:
function randomSmithyCheck called 5000 returned 100% blocks executed 83%
     5000:   19:void randomSmithyCheck(int currentPlayer, struct gameState *state) {
        -:   20:    int k;
        -:   21:    
     5000:   22:    int handPos = 0;
     5000:   23:    int bonus = 0;
        -:   24:    
     5000:   25:    int choice1 = 0;
     5000:   26:    int choice2 = 0;
     5000:   27:    int choice3 = 0;
        -:   28:    
        -:   29:    int success;
        -:   30:    struct gameState testState;
        -:   31:    
        -:   32:    
        -:   33:    // Clear the game testState
     5000:   34:    memset(&testState, 23, sizeof(struct gameState));
        -:   35:    // Copy thetemphandgame state to test case
     5000:   36:    memcpy(&testState, state, sizeof(struct gameState));
        -:   37:    
        -:   38:    // Call the function to run the test
     5000:   39:    success = cardEffect(smithy, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        -:   40:    
     5000:   41:    if (success == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   42:        failCount++;
        -:   43:    }
        -:   44:    
        -:   45:    // Taken from Smithy Card Function
        -:   46:    
        -:   47:    //+3 Cards
        -:   48:    // ** Bug #3: Change 3 to 2 (reducing it to +2 cards)
    15000:   49:    for (k = 0; k < 2; k++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   50:    {
    10000:   51:        success = drawCard(currentPlayer, &testState);
call    0 returned 100%
    10000:   52:        if (success == -1 && testState.deckCount[currentPlayer] > 0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   53:            drawCardFailed++;
    #####:   54:            failCount++;
        -:   55:        }
        -:   56:    }
        -:   57:    
        -:   58:    //discard card from hand
     5000:   59:    success = discardCard(handPos, currentPlayer, &testState, 0);
call    0 returned 100%
        -:   60:    
        -:   61:    // Was discarding a card a success?
     5000:   62:    if (success) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   63:        discardFailed++;
    #####:   64:        failCount++;
        -:   65:    }
        -:   66:    
        -:   67:    // Check if Deck Count for testState and state match
     5000:   68:    int testStateDeckCount = testState.deckCount[currentPlayer];
     5000:   69:    int stateDeckCount = state->deckCount[currentPlayer];
        -:   70:    
     5000:   71:    if (testStateDeckCount != stateDeckCount) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5000:   72:        deckCountFailed++;
     5000:   73:        failCount++;
        -:   74:    }
        -:   75:    
        -:   76:    // Check if Hand Count for testState and state match
     5000:   77:    int testStateHandCount = testState.handCount[currentPlayer];
     5000:   78:    int stateHandCount = state->handCount[currentPlayer];
        -:   79:    
     5000:   80:    if (testStateHandCount != stateHandCount) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5000:   81:        handCountFailed++;
     5000:   82:        failCount++;
        -:   83:    }
     5000:   84:}
        -:   85:
function main called 1 returned 100% blocks executed 96%
        1:   86:int main() {
        -:   87:    // Use time as seed for random
        1:   88:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   89:    
        -:   90:    int i;
        -:   91:    int currentPlayer;
        -:   92:    
        -:   93:    struct gameState state;
        -:   94:    
        1:   95:    int iterations = 5000;
        -:   96:    
        1:   97:    printf("Testing: smithyCard\n\n");
call    0 returned 100%
        1:   98:    printf("****** RANDOM TESTS *****\n");
call    0 returned 100%
        -:   99:    
        -:  100:    // Initalize Game: 2 players, seed of 1000
        -:  101:    //    initializeGame(numPlayer, k, seed, &state);
        -:  102:    
     5001:  103:    for (i = 0; i < iterations; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  104:        // Clear the game state
     5000:  105:        memset(&state, 23, sizeof(struct gameState));
        -:  106:        
        -:  107:        // Get the player number
     5000:  108:        currentPlayer = Random() * MAX_PLAYERS;
call    0 returned 100%
        -:  109:        
        -:  110:        // Set the deck count for the player
     5000:  111:        state.deckCount[currentPlayer] = Random() * MAX_DECK;
call    0 returned 100%
        -:  112:        
        -:  113:        // Set hand count to random number
     5000:  114:        state.handCount[currentPlayer] = Random() * MAX_HAND;
call    0 returned 100%
        -:  115:        
        -:  116:        // Set the discard count for the player
     5000:  117:        state.discardCount[currentPlayer] = Random() * MAX_DECK;
call    0 returned 100%
        -:  118:        
        -:  119:        // Set the number of cards current players played
     5000:  120:        state.playedCardCount = Random() * (MAX_DECK - 1);
call    0 returned 100%
        -:  121:        
        -:  122:        // Set the player as current player (whose turn)
     5000:  123:        state.whoseTurn = currentPlayer;
        -:  124:        
        -:  125:        // Run Adventurer Test
     5000:  126:        randomSmithyCheck(currentPlayer, &state);
call    0 returned 100%
        -:  127:    }
        -:  128:    
        1:  129:    if (failCount == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  130:        printf("PROGRAM TEST SUCCESFULLY COMPLETED\n\n");
call    0 never executed
        -:  131:    } else {
        1:  132:        printf("PROGRAM TEST FAILED\n\n");
call    0 returned 100%
        1:  133:        printf("NUMBER OF TESTS FAILED: %d\n", failCount);
call    0 returned 100%
        1:  134:        printf("DISCARD TESTS FAILED: %d\n", discardFailed);
call    0 returned 100%
        1:  135:        printf("DRAW CARD TESTS FAILED: %d\n", drawCardFailed);
call    0 returned 100%
        1:  136:        printf("DECK COUNT TESTS FAILED: %d\n", deckCountFailed);
call    0 returned 100%
        1:  137:        printf("HAND COUNT TESTS FAILED: %d\n", handCountFailed);
call    0 returned 100%
        -:  138:    }
        -:  139:    
        1:  140:    return 0;
        -:  141:}
