        -:    0:Source:unittest2.c
        -:    0:Programs:1
        -:    1:// Testing shuffle()
        -:    2:
        -:    3:#include <stdio.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:int fail = 0;
        -:   11:
        -:   12:// Own assert true function to provide more information than standard C assert
        2:   13:void assertTrue(int a, int b) {
        2:   14:    if (a == b) {
        2:   15:        printf("TEST: PASSED\n\n");
        -:   16:    } else {
    #####:   17:        printf("TEST: FAILED\n\n");
    #####:   18:        fail++;
        -:   19:    }
        2:   20:}
        -:   21:
        1:   22:int main() {
        -:   23:    
        1:   24:    int k[10] = { adventurer, council_room, feast, gardens, mine,
        -:   25:        remodel, smithy, village, baron, great_hall };
        -:   26:    
        1:   27:    int seed = 1000;
        1:   28:    int numPlayer = 2;
        -:   29:    
        -:   30:    struct gameState state;
        -:   31:    
        1:   32:    printf("Testing: shuffle()\n");
        -:   33:    
        -:   34:    // Clear the game state
        1:   35:    memset(&state, 23, sizeof(struct gameState));
        -:   36:    
        -:   37:    // Initalize Game: 2 players, seed of 1000
        1:   38:    initializeGame(numPlayer, k, seed, &state);
        -:   39:    
        -:   40:    // Set 0 as the number of cards in deck
        1:   41:    printf("Deck Count = 0\n");
        1:   42:    printf("Game should cannot shuffle due to no cards in deck\n");
        1:   43:    state.deckCount[0] = 0;
        1:   44:    assertTrue(shuffle(0, &state), -1);
        -:   45:    
        -:   46:    // Set 20 as the number of cards in deck
        1:   47:    printf("Deck Count = 20\n");
        1:   48:    printf("Game can shuffle the deck\n");
        1:   49:    state.deckCount[0] = 20;
        1:   50:    shuffle(0, &state);
        1:   51:    assertTrue(state.deckCount[0], 20);
        -:   52:    
        -:   53:    
        1:   54:    if (fail == 0) {
        1:   55:        printf("PROGRAM TEST SUCCESFULLY COMPLETED\n\n");
        -:   56:    } else {
    #####:   57:        printf("PROGRAM TEST FAILED\n\n");
        -:   58:    }
        -:   59:    
        1:   60:    return 0;
        -:   61:}
